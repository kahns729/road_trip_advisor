import json, config
import path, tripadvisor
from math import ceil

# Summary: returns the day itinerary by filtering out locations with
#          too few reviews or too low ratings.
# Constraints: events is the return value getResults from tripadvisor.py
def getResults (data):
    locations = data["events"]
    bestLocEvents = []
    min_num_events = 10
    for loc in locations:
        dic = {}
        dic["node"] = loc["node"]
        dic["attractions"] = filterEvents(loc["attractions"], min_num_events)
        dic["food"] = filterEvents(loc["food"], min_num_events)
        dic["hotels"] = filterEvents(loc["hotels"], min_num_events)
        bestLocEvents.append(dic)
    data["events"] = bestLocEvents
    return makeItinerary(data)

# Summary: returns the filtered events for all waypoints 
def makeItinerary (data):
    scale = 1
    daytime = 12
    user_desired_days = data["usertime"]
    min_time = data["duration"]
    total_time = int(ceil(scale * data["duration"]))
    fun_time = int(ceil(user_desired_days * daytime)) - total_time
    num_activities = fun_time / 2
    activities_per_day = num_activities / user_desired_days
    locations = data["events"]
    drive_hours = int(ceil(user_desired_days * daytime)) - fun_time
    days = []

    start = data["events"][0]["node"]

    # number of locations we pass in a day
    interval = int(ceil(len(locations) / user_desired_days))
    # if an edge case, no activities fit into schedule
    if edge_case(user_desired_days, min_time, num_activities):
        return []
    for i in range(int(user_desired_days)):
        activities = []
        temp = []
        top_hotel = None
        top_dinner = None
        # for each location in the day interval
        for j in range(interval):
            # if out of bounds
            if i*interval + j >= len(locations):
                break
            temp.append(locations[i*interval + j])
        top_hotel = max(temp[-1]["hotels"], key=lambda hotel: hotel["rating"])
        top_dinner = max(temp[-1]["food"], key=lambda food: food["rating"])
        print(len(temp[-1]["hotels"]))
        print(len(temp[-1]["food"]))
        #if i == 0:
        #    print(json.dumps(top_hotel, indent=4, sort_keys=True))
        #    print(json.dumps(temp[-1]["hotels"], indent=4, sort_keys=True))
#             print(json.dumps(top_dinner, indent=4, sort_keys=True))
        # print("top_dinner: " + json.dumps(top_dinner, indent=4, sort_keys=True))
        # print(temp[0]["attractions"])
        # for loc in temp:
            # print(len(loc["attractions"]))
        def best_attraction(location):
            attrs = location["attractions"]
            if len(attrs) > 0:
                return max(attrs, key=lambda attr: attr["rating"])
            else:
                return {"rating": -1}
        top_x_activities = sorted(temp, key=lambda loc: best_attraction(loc)["rating"])[:1] #activities_per_day]

        for activity in top_x_activities:
             print(json.dumps(activity, indent=4, sort_keys=True))
             activities.append(activity)
        print("i: " + str(i))
        days.append({})
        days[i]["day"] = i
        activities.append(top_dinner)
        activities.append(top_hotel)
        days[i]["events"] = activities
        # for first day, starting at literal beginning
        if i == 0:
            days[i]["start"] = locations[0]["node"]
        else:
            days[i]["start"] = days[i-1]["end"]

 #       days[i]["events"].append(top_dinner)
#        days[i]["events"].append(top_hotel)
        days[i]["end"] = {"lat": top_hotel["latitude"], "lng": top_hotel["longitude"]}
    return days
    
# Summary: returns true if an edge case
def edge_case (user_days, min_hours, num_activities):
    return False
    if user_days * 24 <= int(ceil(min_hours)):
        return True
    elif num_activities < user_days:
        return True
    return False

 # Summary: returns the filtered events for all waypoints 
def filterEvents (events, min_num_events):
    # print(len(events))
    return sorted(events, key=lambda event: event["num_reviews"])[:min_num_events]
    # bestEvents = []
    # choose_best = create_filterEvent(min_num_events)
    # return reduce(choose_best, events, bestEvents)
    
# Summary: returns the filtered events, removes events with
#          too few reviews or too low ratings
def create_filterEvent(min_num_events):
    def filterEvent(bestEvents, event):
        if len(bestEvents) < min_num_events:
            bestEvents.append(event)
        else:
            bestEvents.append(event)
            bestEvents.remove(worstBestEvent(bestEvents))
        return bestEvents

# Summary: returns the best event with the fewest number of reviews
def worstBestEvent(events):
    minimum = {}
    count = 0
    for event in events:
        if count == 0:
            minimum = event
        elif minimum["num_reviews"] > event["num_reviews"]:
            minimum = event
    return minimum

crap = path.find_waypoints("USS Alabama, Battleship Parkway, Mobile, AL", "USS Constitution, Boston, MA")
crap = tripadvisor.getResults(crap)
crap = getResults(crap)
#print(json.dumps(crap, indent=4, sort_keys=True))
